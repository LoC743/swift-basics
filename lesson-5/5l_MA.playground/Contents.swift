import UIKit

struct Baggage {
    let id: Int
    let name: String
    let description: String
    let space: Int
}

enum Transmission {
    case auto
    case manual
    case none
}

/* ///////////////////////////////////////////////////
/// 1. Создать протокол «Car» и описать свойства,  ///
/// общие для автомобилей, а также метод действия. ///
/////////////////////////////////////////////////// */

protocol Car {
    var model: String { get }
    var year: UInt16 { get }
    var trunkSpace: Int { get }
    var usedTrunkSpace: Int { get }
    var color: UIColor { get }
    var bluetooth: Bool { get }
    var mileage: Int { get }
    var transmission: Transmission { get }
    var hp: UInt { get }
    var weight: UInt { get }
    
    var baggageArray: [Baggage] { get set }
    
    func increaseTrunkSpace(_ space: Int) -> Bool
    func decreaseTrunkSpace(_ space: Int) -> Bool
    
    func addBaggage(_ baggage: Baggage) -> Bool
    func removeBaggageBy(_ id: Int) -> Bool
    
    func printBaggage()
    func printStatus()
}


/* /////////////////////////////////////////////////////////////////////////////
/// 2. Создать расширения для протокола «Car» и реализовать                  ///
/// в них методы конкретных действий с автомобилем:                          ///
/// открыть/закрыть окно, запустить/заглушить двигатель и т.д.               ///
/// (по одному методу на действие, реализовывать следует только те действия, ///
/// реализация которых общая для всех автомобилей).                          ///
///////////////////////////////////////////////////////////////////////////// */



/* //////////////////////////////////////////////////////////////////////////////////
/// 3. Создать два класса, имплементирующих протокол «Car» - trunkCar и sportСar. ///
/// Описать в них свойства, отличающиеся для спортивного автомобиля и цистерны.   ///
////////////////////////////////////////////////////////////////////////////////// */



/* ///////////////////////////////////////////////////////
/// 4. Для каждого класса написать расширение,         ///
/// имплементирующее протокол CustomStringConvertible. ///
/////////////////////////////////////////////////////// */



/* //////////////////////////////////////////////////
/// 5. Создать несколько объектов каждого класса. ///
/// Применить к ним различные действия.           ///
////////////////////////////////////////////////// */



/* ///////////////////////////////////////
/// 6. Вывести сами объекты в консоль. ///
/////////////////////////////////////// */

